// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/gen/model"
)

func newSkuStock(db *gorm.DB, opts ...gen.DOOption) skuStock {
	_skuStock := skuStock{}

	_skuStock.skuStockDo.UseDB(db, opts...)
	_skuStock.skuStockDo.UseModel(&model.SkuStock{})

	tableName := _skuStock.skuStockDo.TableName()
	_skuStock.ALL = field.NewAsterisk(tableName)
	_skuStock.ID = field.NewInt32(tableName, "id")
	_skuStock.Sku = field.NewString(tableName, "sku")
	_skuStock.Stock = field.NewInt32(tableName, "stock")
	_skuStock.CreatedAt = field.NewTime(tableName, "created_at")
	_skuStock.UpdatedAt = field.NewTime(tableName, "updated_at")

	_skuStock.fillFieldMap()

	return _skuStock
}

type skuStock struct {
	skuStockDo skuStockDo

	ALL       field.Asterisk
	ID        field.Int32
	Sku       field.String
	Stock     field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s skuStock) Table(newTableName string) *skuStock {
	s.skuStockDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skuStock) As(alias string) *skuStock {
	s.skuStockDo.DO = *(s.skuStockDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skuStock) updateTableName(table string) *skuStock {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Sku = field.NewString(table, "sku")
	s.Stock = field.NewInt32(table, "stock")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *skuStock) WithContext(ctx context.Context) ISkuStockDo { return s.skuStockDo.WithContext(ctx) }

func (s skuStock) TableName() string { return s.skuStockDo.TableName() }

func (s skuStock) Alias() string { return s.skuStockDo.Alias() }

func (s skuStock) Columns(cols ...field.Expr) gen.Columns { return s.skuStockDo.Columns(cols...) }

func (s *skuStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skuStock) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sku"] = s.Sku
	s.fieldMap["stock"] = s.Stock
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s skuStock) clone(db *gorm.DB) skuStock {
	s.skuStockDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skuStock) replaceDB(db *gorm.DB) skuStock {
	s.skuStockDo.ReplaceDB(db)
	return s
}

type skuStockDo struct{ gen.DO }

type ISkuStockDo interface {
	gen.SubQuery
	Debug() ISkuStockDo
	WithContext(ctx context.Context) ISkuStockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISkuStockDo
	WriteDB() ISkuStockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISkuStockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISkuStockDo
	Not(conds ...gen.Condition) ISkuStockDo
	Or(conds ...gen.Condition) ISkuStockDo
	Select(conds ...field.Expr) ISkuStockDo
	Where(conds ...gen.Condition) ISkuStockDo
	Order(conds ...field.Expr) ISkuStockDo
	Distinct(cols ...field.Expr) ISkuStockDo
	Omit(cols ...field.Expr) ISkuStockDo
	Join(table schema.Tabler, on ...field.Expr) ISkuStockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISkuStockDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISkuStockDo
	Group(cols ...field.Expr) ISkuStockDo
	Having(conds ...gen.Condition) ISkuStockDo
	Limit(limit int) ISkuStockDo
	Offset(offset int) ISkuStockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISkuStockDo
	Unscoped() ISkuStockDo
	Create(values ...*model.SkuStock) error
	CreateInBatches(values []*model.SkuStock, batchSize int) error
	Save(values ...*model.SkuStock) error
	First() (*model.SkuStock, error)
	Take() (*model.SkuStock, error)
	Last() (*model.SkuStock, error)
	Find() ([]*model.SkuStock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SkuStock, err error)
	FindInBatches(result *[]*model.SkuStock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SkuStock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISkuStockDo
	Assign(attrs ...field.AssignExpr) ISkuStockDo
	Joins(fields ...field.RelationField) ISkuStockDo
	Preload(fields ...field.RelationField) ISkuStockDo
	FirstOrInit() (*model.SkuStock, error)
	FirstOrCreate() (*model.SkuStock, error)
	FindByPage(offset int, limit int) (result []*model.SkuStock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISkuStockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s skuStockDo) Debug() ISkuStockDo {
	return s.withDO(s.DO.Debug())
}

func (s skuStockDo) WithContext(ctx context.Context) ISkuStockDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skuStockDo) ReadDB() ISkuStockDo {
	return s.Clauses(dbresolver.Read)
}

func (s skuStockDo) WriteDB() ISkuStockDo {
	return s.Clauses(dbresolver.Write)
}

func (s skuStockDo) Session(config *gorm.Session) ISkuStockDo {
	return s.withDO(s.DO.Session(config))
}

func (s skuStockDo) Clauses(conds ...clause.Expression) ISkuStockDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skuStockDo) Returning(value interface{}, columns ...string) ISkuStockDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skuStockDo) Not(conds ...gen.Condition) ISkuStockDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skuStockDo) Or(conds ...gen.Condition) ISkuStockDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skuStockDo) Select(conds ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skuStockDo) Where(conds ...gen.Condition) ISkuStockDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skuStockDo) Order(conds ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skuStockDo) Distinct(cols ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skuStockDo) Omit(cols ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skuStockDo) Join(table schema.Tabler, on ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skuStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skuStockDo) RightJoin(table schema.Tabler, on ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skuStockDo) Group(cols ...field.Expr) ISkuStockDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skuStockDo) Having(conds ...gen.Condition) ISkuStockDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skuStockDo) Limit(limit int) ISkuStockDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skuStockDo) Offset(offset int) ISkuStockDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skuStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISkuStockDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skuStockDo) Unscoped() ISkuStockDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skuStockDo) Create(values ...*model.SkuStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skuStockDo) CreateInBatches(values []*model.SkuStock, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skuStockDo) Save(values ...*model.SkuStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skuStockDo) First() (*model.SkuStock, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuStock), nil
	}
}

func (s skuStockDo) Take() (*model.SkuStock, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuStock), nil
	}
}

func (s skuStockDo) Last() (*model.SkuStock, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuStock), nil
	}
}

func (s skuStockDo) Find() ([]*model.SkuStock, error) {
	result, err := s.DO.Find()
	return result.([]*model.SkuStock), err
}

func (s skuStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SkuStock, err error) {
	buf := make([]*model.SkuStock, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skuStockDo) FindInBatches(result *[]*model.SkuStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skuStockDo) Attrs(attrs ...field.AssignExpr) ISkuStockDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skuStockDo) Assign(attrs ...field.AssignExpr) ISkuStockDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skuStockDo) Joins(fields ...field.RelationField) ISkuStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skuStockDo) Preload(fields ...field.RelationField) ISkuStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skuStockDo) FirstOrInit() (*model.SkuStock, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuStock), nil
	}
}

func (s skuStockDo) FirstOrCreate() (*model.SkuStock, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuStock), nil
	}
}

func (s skuStockDo) FindByPage(offset int, limit int) (result []*model.SkuStock, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skuStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skuStockDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skuStockDo) Delete(models ...*model.SkuStock) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skuStockDo) withDO(do gen.Dao) *skuStockDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/gen/model"
)

func newSpec(db *gorm.DB, opts ...gen.DOOption) spec {
	_spec := spec{}

	_spec.specDo.UseDB(db, opts...)
	_spec.specDo.UseModel(&model.Spec{})

	tableName := _spec.specDo.TableName()
	_spec.ALL = field.NewAsterisk(tableName)
	_spec.ID = field.NewInt32(tableName, "id")
	_spec.CategoryID = field.NewInt32(tableName, "category_id")
	_spec.GroupID = field.NewInt32(tableName, "group_id")
	_spec.Name = field.NewString(tableName, "name")
	_spec.IsGenerate = field.NewBool(tableName, "is_generate")
	_spec.Searching = field.NewBool(tableName, "searching")
	_spec.CreatedAt = field.NewTime(tableName, "created_at")
	_spec.UpdatedAt = field.NewTime(tableName, "updated_at")

	_spec.fillFieldMap()

	return _spec
}

type spec struct {
	specDo specDo

	ALL        field.Asterisk
	ID         field.Int32
	CategoryID field.Int32  // 商品分类id
	GroupID    field.Int32  // 分组id
	Name       field.String // 参数名称
	IsGenerate field.Bool   // 是否通用
	Searching  field.Bool   // 是否用于搜索
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (s spec) Table(newTableName string) *spec {
	s.specDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spec) As(alias string) *spec {
	s.specDo.DO = *(s.specDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spec) updateTableName(table string) *spec {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.CategoryID = field.NewInt32(table, "category_id")
	s.GroupID = field.NewInt32(table, "group_id")
	s.Name = field.NewString(table, "name")
	s.IsGenerate = field.NewBool(table, "is_generate")
	s.Searching = field.NewBool(table, "searching")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *spec) WithContext(ctx context.Context) *specDo { return s.specDo.WithContext(ctx) }

func (s spec) TableName() string { return s.specDo.TableName() }

func (s spec) Alias() string { return s.specDo.Alias() }

func (s spec) Columns(cols ...field.Expr) gen.Columns { return s.specDo.Columns(cols...) }

func (s *spec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spec) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["category_id"] = s.CategoryID
	s.fieldMap["group_id"] = s.GroupID
	s.fieldMap["name"] = s.Name
	s.fieldMap["is_generate"] = s.IsGenerate
	s.fieldMap["searching"] = s.Searching
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s spec) clone(db *gorm.DB) spec {
	s.specDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spec) replaceDB(db *gorm.DB) spec {
	s.specDo.ReplaceDB(db)
	return s
}

type specDo struct{ gen.DO }

func (s specDo) Debug() *specDo {
	return s.withDO(s.DO.Debug())
}

func (s specDo) WithContext(ctx context.Context) *specDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s specDo) ReadDB() *specDo {
	return s.Clauses(dbresolver.Read)
}

func (s specDo) WriteDB() *specDo {
	return s.Clauses(dbresolver.Write)
}

func (s specDo) Session(config *gorm.Session) *specDo {
	return s.withDO(s.DO.Session(config))
}

func (s specDo) Clauses(conds ...clause.Expression) *specDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s specDo) Returning(value interface{}, columns ...string) *specDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s specDo) Not(conds ...gen.Condition) *specDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s specDo) Or(conds ...gen.Condition) *specDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s specDo) Select(conds ...field.Expr) *specDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s specDo) Where(conds ...gen.Condition) *specDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s specDo) Order(conds ...field.Expr) *specDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s specDo) Distinct(cols ...field.Expr) *specDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s specDo) Omit(cols ...field.Expr) *specDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s specDo) Join(table schema.Tabler, on ...field.Expr) *specDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s specDo) LeftJoin(table schema.Tabler, on ...field.Expr) *specDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s specDo) RightJoin(table schema.Tabler, on ...field.Expr) *specDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s specDo) Group(cols ...field.Expr) *specDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s specDo) Having(conds ...gen.Condition) *specDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s specDo) Limit(limit int) *specDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s specDo) Offset(offset int) *specDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s specDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *specDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s specDo) Unscoped() *specDo {
	return s.withDO(s.DO.Unscoped())
}

func (s specDo) Create(values ...*model.Spec) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s specDo) CreateInBatches(values []*model.Spec, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s specDo) Save(values ...*model.Spec) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s specDo) First() (*model.Spec, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spec), nil
	}
}

func (s specDo) Take() (*model.Spec, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spec), nil
	}
}

func (s specDo) Last() (*model.Spec, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spec), nil
	}
}

func (s specDo) Find() ([]*model.Spec, error) {
	result, err := s.DO.Find()
	return result.([]*model.Spec), err
}

func (s specDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spec, err error) {
	buf := make([]*model.Spec, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s specDo) FindInBatches(result *[]*model.Spec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s specDo) Attrs(attrs ...field.AssignExpr) *specDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s specDo) Assign(attrs ...field.AssignExpr) *specDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s specDo) Joins(fields ...field.RelationField) *specDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s specDo) Preload(fields ...field.RelationField) *specDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s specDo) FirstOrInit() (*model.Spec, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spec), nil
	}
}

func (s specDo) FirstOrCreate() (*model.Spec, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spec), nil
	}
}

func (s specDo) FindByPage(offset int, limit int) (result []*model.Spec, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s specDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s specDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s specDo) Delete(models ...*model.Spec) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *specDo) withDO(do gen.Dao) *specDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/gen/model"
)

func newSku(db *gorm.DB, opts ...gen.DOOption) sku {
	_sku := sku{}

	_sku.skuDo.UseDB(db, opts...)
	_sku.skuDo.UseModel(&model.Sku{})

	tableName := _sku.skuDo.TableName()
	_sku.ALL = field.NewAsterisk(tableName)
	_sku.ID = field.NewInt32(tableName, "id")
	_sku.Name = field.NewString(tableName, "name")
	_sku.Sku = field.NewString(tableName, "sku")
	_sku.Price = field.NewFloat64(tableName, "price")
	_sku.MarketPrice = field.NewFloat64(tableName, "market_price")
	_sku.Img = field.NewString(tableName, "img")
	_sku.CreatedAt = field.NewTime(tableName, "created_at")
	_sku.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sku.fillFieldMap()

	return _sku
}

type sku struct {
	skuDo skuDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String  // skuname
	Sku         field.String  // sku
	Price       field.Float64 // 售价
	MarketPrice field.Float64 // 市场价
	Img         field.String  // 图片
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (s sku) Table(newTableName string) *sku {
	s.skuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sku) As(alias string) *sku {
	s.skuDo.DO = *(s.skuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sku) updateTableName(table string) *sku {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Sku = field.NewString(table, "sku")
	s.Price = field.NewFloat64(table, "price")
	s.MarketPrice = field.NewFloat64(table, "market_price")
	s.Img = field.NewString(table, "img")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sku) WithContext(ctx context.Context) *skuDo { return s.skuDo.WithContext(ctx) }

func (s sku) TableName() string { return s.skuDo.TableName() }

func (s sku) Alias() string { return s.skuDo.Alias() }

func (s sku) Columns(cols ...field.Expr) gen.Columns { return s.skuDo.Columns(cols...) }

func (s *sku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sku) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["sku"] = s.Sku
	s.fieldMap["price"] = s.Price
	s.fieldMap["market_price"] = s.MarketPrice
	s.fieldMap["img"] = s.Img
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sku) clone(db *gorm.DB) sku {
	s.skuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sku) replaceDB(db *gorm.DB) sku {
	s.skuDo.ReplaceDB(db)
	return s
}

type skuDo struct{ gen.DO }

func (s skuDo) Debug() *skuDo {
	return s.withDO(s.DO.Debug())
}

func (s skuDo) WithContext(ctx context.Context) *skuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skuDo) ReadDB() *skuDo {
	return s.Clauses(dbresolver.Read)
}

func (s skuDo) WriteDB() *skuDo {
	return s.Clauses(dbresolver.Write)
}

func (s skuDo) Session(config *gorm.Session) *skuDo {
	return s.withDO(s.DO.Session(config))
}

func (s skuDo) Clauses(conds ...clause.Expression) *skuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skuDo) Returning(value interface{}, columns ...string) *skuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skuDo) Not(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skuDo) Or(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skuDo) Select(conds ...field.Expr) *skuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skuDo) Where(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skuDo) Order(conds ...field.Expr) *skuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skuDo) Distinct(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skuDo) Omit(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skuDo) Join(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skuDo) RightJoin(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skuDo) Group(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skuDo) Having(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skuDo) Limit(limit int) *skuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skuDo) Offset(offset int) *skuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skuDo) Unscoped() *skuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skuDo) Create(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skuDo) CreateInBatches(values []*model.Sku, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skuDo) Save(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skuDo) First() (*model.Sku, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Take() (*model.Sku, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Last() (*model.Sku, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Find() ([]*model.Sku, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sku), err
}

func (s skuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sku, err error) {
	buf := make([]*model.Sku, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skuDo) FindInBatches(result *[]*model.Sku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skuDo) Attrs(attrs ...field.AssignExpr) *skuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skuDo) Assign(attrs ...field.AssignExpr) *skuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skuDo) Joins(fields ...field.RelationField) *skuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skuDo) Preload(fields ...field.RelationField) *skuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skuDo) FirstOrInit() (*model.Sku, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FirstOrCreate() (*model.Sku, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FindByPage(offset int, limit int) (result []*model.Sku, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skuDo) Delete(models ...*model.Sku) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skuDo) withDO(do gen.Dao) *skuDo {
	s.DO = *do.(*gen.DO)
	return s
}

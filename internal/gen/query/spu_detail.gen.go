// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/gen/model"
)

func newSpuDetail(db *gorm.DB, opts ...gen.DOOption) spuDetail {
	_spuDetail := spuDetail{}

	_spuDetail.spuDetailDo.UseDB(db, opts...)
	_spuDetail.spuDetailDo.UseModel(&model.SpuDetail{})

	tableName := _spuDetail.spuDetailDo.TableName()
	_spuDetail.ALL = field.NewAsterisk(tableName)
	_spuDetail.ID = field.NewInt32(tableName, "id")
	_spuDetail.SpuID = field.NewInt32(tableName, "spu_id")
	_spuDetail.Description = field.NewString(tableName, "description")
	_spuDetail.GenericSpec = field.NewString(tableName, "generic_spec")
	_spuDetail.SpecialSpec = field.NewString(tableName, "special_spec")
	_spuDetail.PackageList = field.NewString(tableName, "package_list")
	_spuDetail.AfterService = field.NewString(tableName, "after_service")
	_spuDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_spuDetail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_spuDetail.fillFieldMap()

	return _spuDetail
}

type spuDetail struct {
	spuDetailDo spuDetailDo

	ALL          field.Asterisk
	ID           field.Int32
	SpuID        field.Int32
	Description  field.String
	GenericSpec  field.String
	SpecialSpec  field.String
	PackageList  field.String
	AfterService field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (s spuDetail) Table(newTableName string) *spuDetail {
	s.spuDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spuDetail) As(alias string) *spuDetail {
	s.spuDetailDo.DO = *(s.spuDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spuDetail) updateTableName(table string) *spuDetail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SpuID = field.NewInt32(table, "spu_id")
	s.Description = field.NewString(table, "description")
	s.GenericSpec = field.NewString(table, "generic_spec")
	s.SpecialSpec = field.NewString(table, "special_spec")
	s.PackageList = field.NewString(table, "package_list")
	s.AfterService = field.NewString(table, "after_service")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *spuDetail) WithContext(ctx context.Context) ISpuDetailDo {
	return s.spuDetailDo.WithContext(ctx)
}

func (s spuDetail) TableName() string { return s.spuDetailDo.TableName() }

func (s spuDetail) Alias() string { return s.spuDetailDo.Alias() }

func (s spuDetail) Columns(cols ...field.Expr) gen.Columns { return s.spuDetailDo.Columns(cols...) }

func (s *spuDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spuDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["description"] = s.Description
	s.fieldMap["generic_spec"] = s.GenericSpec
	s.fieldMap["special_spec"] = s.SpecialSpec
	s.fieldMap["package_list"] = s.PackageList
	s.fieldMap["after_service"] = s.AfterService
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s spuDetail) clone(db *gorm.DB) spuDetail {
	s.spuDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spuDetail) replaceDB(db *gorm.DB) spuDetail {
	s.spuDetailDo.ReplaceDB(db)
	return s
}

type spuDetailDo struct{ gen.DO }

type ISpuDetailDo interface {
	gen.SubQuery
	Debug() ISpuDetailDo
	WithContext(ctx context.Context) ISpuDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuDetailDo
	WriteDB() ISpuDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuDetailDo
	Not(conds ...gen.Condition) ISpuDetailDo
	Or(conds ...gen.Condition) ISpuDetailDo
	Select(conds ...field.Expr) ISpuDetailDo
	Where(conds ...gen.Condition) ISpuDetailDo
	Order(conds ...field.Expr) ISpuDetailDo
	Distinct(cols ...field.Expr) ISpuDetailDo
	Omit(cols ...field.Expr) ISpuDetailDo
	Join(table schema.Tabler, on ...field.Expr) ISpuDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuDetailDo
	Group(cols ...field.Expr) ISpuDetailDo
	Having(conds ...gen.Condition) ISpuDetailDo
	Limit(limit int) ISpuDetailDo
	Offset(offset int) ISpuDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuDetailDo
	Unscoped() ISpuDetailDo
	Create(values ...*model.SpuDetail) error
	CreateInBatches(values []*model.SpuDetail, batchSize int) error
	Save(values ...*model.SpuDetail) error
	First() (*model.SpuDetail, error)
	Take() (*model.SpuDetail, error)
	Last() (*model.SpuDetail, error)
	Find() ([]*model.SpuDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuDetail, err error)
	FindInBatches(result *[]*model.SpuDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpuDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuDetailDo
	Assign(attrs ...field.AssignExpr) ISpuDetailDo
	Joins(fields ...field.RelationField) ISpuDetailDo
	Preload(fields ...field.RelationField) ISpuDetailDo
	FirstOrInit() (*model.SpuDetail, error)
	FirstOrCreate() (*model.SpuDetail, error)
	FindByPage(offset int, limit int) (result []*model.SpuDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuDetailDo) Debug() ISpuDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s spuDetailDo) WithContext(ctx context.Context) ISpuDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuDetailDo) ReadDB() ISpuDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuDetailDo) WriteDB() ISpuDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuDetailDo) Session(config *gorm.Session) ISpuDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuDetailDo) Clauses(conds ...clause.Expression) ISpuDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuDetailDo) Returning(value interface{}, columns ...string) ISpuDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuDetailDo) Not(conds ...gen.Condition) ISpuDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuDetailDo) Or(conds ...gen.Condition) ISpuDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuDetailDo) Select(conds ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuDetailDo) Where(conds ...gen.Condition) ISpuDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuDetailDo) Order(conds ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuDetailDo) Distinct(cols ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuDetailDo) Omit(cols ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuDetailDo) Join(table schema.Tabler, on ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuDetailDo) Group(cols ...field.Expr) ISpuDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuDetailDo) Having(conds ...gen.Condition) ISpuDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuDetailDo) Limit(limit int) ISpuDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuDetailDo) Offset(offset int) ISpuDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuDetailDo) Unscoped() ISpuDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuDetailDo) Create(values ...*model.SpuDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuDetailDo) CreateInBatches(values []*model.SpuDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuDetailDo) Save(values ...*model.SpuDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuDetailDo) First() (*model.SpuDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuDetail), nil
	}
}

func (s spuDetailDo) Take() (*model.SpuDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuDetail), nil
	}
}

func (s spuDetailDo) Last() (*model.SpuDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuDetail), nil
	}
}

func (s spuDetailDo) Find() ([]*model.SpuDetail, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpuDetail), err
}

func (s spuDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuDetail, err error) {
	buf := make([]*model.SpuDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuDetailDo) FindInBatches(result *[]*model.SpuDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuDetailDo) Attrs(attrs ...field.AssignExpr) ISpuDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuDetailDo) Assign(attrs ...field.AssignExpr) ISpuDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuDetailDo) Joins(fields ...field.RelationField) ISpuDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuDetailDo) Preload(fields ...field.RelationField) ISpuDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuDetailDo) FirstOrInit() (*model.SpuDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuDetail), nil
	}
}

func (s spuDetailDo) FirstOrCreate() (*model.SpuDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuDetail), nil
	}
}

func (s spuDetailDo) FindByPage(offset int, limit int) (result []*model.SpuDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuDetailDo) Delete(models ...*model.SpuDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuDetailDo) withDO(do gen.Dao) *spuDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/gen/model"
)

func newSpu(db *gorm.DB, opts ...gen.DOOption) spu {
	_spu := spu{}

	_spu.spuDo.UseDB(db, opts...)
	_spu.spuDo.UseModel(&model.Spu{})

	tableName := _spu.spuDo.TableName()
	_spu.ALL = field.NewAsterisk(tableName)
	_spu.ID = field.NewInt32(tableName, "id")
	_spu.Spu = field.NewString(tableName, "spu")
	_spu.Name = field.NewString(tableName, "name")
	_spu.Img = field.NewString(tableName, "img")
	_spu.Status = field.NewBool(tableName, "status")
	_spu.BrandBn = field.NewString(tableName, "brand_bn")
	_spu.StoreBn = field.NewString(tableName, "store_bn")
	_spu.SaleCnt = field.NewInt32(tableName, "sale_cnt")
	_spu.PriceRange = field.NewString(tableName, "price_range")
	_spu.CreatedAt = field.NewTime(tableName, "created_at")
	_spu.UpdatedAt = field.NewTime(tableName, "updated_at")

	_spu.fillFieldMap()

	return _spu
}

type spu struct {
	spuDo spuDo

	ALL        field.Asterisk
	ID         field.Int32
	Spu        field.String // spucode
	Name       field.String // 商品名称
	Img        field.String // 图片
	Status     field.Bool   // 状态1启用，0、禁用
	BrandBn    field.String // 品牌code
	StoreBn    field.String // 商户号
	SaleCnt    field.Int32  // 销量
	PriceRange field.String // 价格区间
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s spu) Table(newTableName string) *spu {
	s.spuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spu) As(alias string) *spu {
	s.spuDo.DO = *(s.spuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spu) updateTableName(table string) *spu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Spu = field.NewString(table, "spu")
	s.Name = field.NewString(table, "name")
	s.Img = field.NewString(table, "img")
	s.Status = field.NewBool(table, "status")
	s.BrandBn = field.NewString(table, "brand_bn")
	s.StoreBn = field.NewString(table, "store_bn")
	s.SaleCnt = field.NewInt32(table, "sale_cnt")
	s.PriceRange = field.NewString(table, "price_range")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *spu) WithContext(ctx context.Context) *spuDo { return s.spuDo.WithContext(ctx) }

func (s spu) TableName() string { return s.spuDo.TableName() }

func (s spu) Alias() string { return s.spuDo.Alias() }

func (s spu) Columns(cols ...field.Expr) gen.Columns { return s.spuDo.Columns(cols...) }

func (s *spu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu"] = s.Spu
	s.fieldMap["name"] = s.Name
	s.fieldMap["img"] = s.Img
	s.fieldMap["status"] = s.Status
	s.fieldMap["brand_bn"] = s.BrandBn
	s.fieldMap["store_bn"] = s.StoreBn
	s.fieldMap["sale_cnt"] = s.SaleCnt
	s.fieldMap["price_range"] = s.PriceRange
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s spu) clone(db *gorm.DB) spu {
	s.spuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spu) replaceDB(db *gorm.DB) spu {
	s.spuDo.ReplaceDB(db)
	return s
}

type spuDo struct{ gen.DO }

func (s spuDo) Debug() *spuDo {
	return s.withDO(s.DO.Debug())
}

func (s spuDo) WithContext(ctx context.Context) *spuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuDo) ReadDB() *spuDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuDo) WriteDB() *spuDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuDo) Session(config *gorm.Session) *spuDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuDo) Clauses(conds ...clause.Expression) *spuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuDo) Returning(value interface{}, columns ...string) *spuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuDo) Not(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuDo) Or(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuDo) Select(conds ...field.Expr) *spuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuDo) Where(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuDo) Order(conds ...field.Expr) *spuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuDo) Distinct(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuDo) Omit(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuDo) Join(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuDo) RightJoin(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuDo) Group(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuDo) Having(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuDo) Limit(limit int) *spuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuDo) Offset(offset int) *spuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *spuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuDo) Unscoped() *spuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuDo) Create(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuDo) CreateInBatches(values []*model.Spu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuDo) Save(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuDo) First() (*model.Spu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Take() (*model.Spu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Last() (*model.Spu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Find() ([]*model.Spu, error) {
	result, err := s.DO.Find()
	return result.([]*model.Spu), err
}

func (s spuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spu, err error) {
	buf := make([]*model.Spu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuDo) FindInBatches(result *[]*model.Spu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuDo) Attrs(attrs ...field.AssignExpr) *spuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuDo) Assign(attrs ...field.AssignExpr) *spuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuDo) Joins(fields ...field.RelationField) *spuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuDo) Preload(fields ...field.RelationField) *spuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuDo) FirstOrInit() (*model.Spu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FirstOrCreate() (*model.Spu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FindByPage(offset int, limit int) (result []*model.Spu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuDo) Delete(models ...*model.Spu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuDo) withDO(do gen.Dao) *spuDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-mall/internal/dal/model"
)

func newSpecGroup(db *gorm.DB, opts ...gen.DOOption) specGroup {
	_specGroup := specGroup{}

	_specGroup.specGroupDo.UseDB(db, opts...)
	_specGroup.specGroupDo.UseModel(&model.SpecGroup{})

	tableName := _specGroup.specGroupDo.TableName()
	_specGroup.ALL = field.NewAsterisk(tableName)
	_specGroup.ID = field.NewInt32(tableName, "id")
	_specGroup.CategoryID = field.NewInt32(tableName, "category_id")
	_specGroup.Name = field.NewString(tableName, "name")
	_specGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_specGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_specGroup.fillFieldMap()

	return _specGroup
}

type specGroup struct {
	specGroupDo specGroupDo

	ALL        field.Asterisk
	ID         field.Int32
	CategoryID field.Int32  // 商品分类id
	Name       field.String // 规格组名称
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (s specGroup) Table(newTableName string) *specGroup {
	s.specGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s specGroup) As(alias string) *specGroup {
	s.specGroupDo.DO = *(s.specGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *specGroup) updateTableName(table string) *specGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.CategoryID = field.NewInt32(table, "category_id")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *specGroup) WithContext(ctx context.Context) ISpecGroupDo {
	return s.specGroupDo.WithContext(ctx)
}

func (s specGroup) TableName() string { return s.specGroupDo.TableName() }

func (s specGroup) Alias() string { return s.specGroupDo.Alias() }

func (s specGroup) Columns(cols ...field.Expr) gen.Columns { return s.specGroupDo.Columns(cols...) }

func (s *specGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *specGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["category_id"] = s.CategoryID
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s specGroup) clone(db *gorm.DB) specGroup {
	s.specGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s specGroup) replaceDB(db *gorm.DB) specGroup {
	s.specGroupDo.ReplaceDB(db)
	return s
}

type specGroupDo struct{ gen.DO }

type ISpecGroupDo interface {
	gen.SubQuery
	Debug() ISpecGroupDo
	WithContext(ctx context.Context) ISpecGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpecGroupDo
	WriteDB() ISpecGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpecGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpecGroupDo
	Not(conds ...gen.Condition) ISpecGroupDo
	Or(conds ...gen.Condition) ISpecGroupDo
	Select(conds ...field.Expr) ISpecGroupDo
	Where(conds ...gen.Condition) ISpecGroupDo
	Order(conds ...field.Expr) ISpecGroupDo
	Distinct(cols ...field.Expr) ISpecGroupDo
	Omit(cols ...field.Expr) ISpecGroupDo
	Join(table schema.Tabler, on ...field.Expr) ISpecGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpecGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpecGroupDo
	Group(cols ...field.Expr) ISpecGroupDo
	Having(conds ...gen.Condition) ISpecGroupDo
	Limit(limit int) ISpecGroupDo
	Offset(offset int) ISpecGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpecGroupDo
	Unscoped() ISpecGroupDo
	Create(values ...*model.SpecGroup) error
	CreateInBatches(values []*model.SpecGroup, batchSize int) error
	Save(values ...*model.SpecGroup) error
	First() (*model.SpecGroup, error)
	Take() (*model.SpecGroup, error)
	Last() (*model.SpecGroup, error)
	Find() ([]*model.SpecGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpecGroup, err error)
	FindInBatches(result *[]*model.SpecGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpecGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpecGroupDo
	Assign(attrs ...field.AssignExpr) ISpecGroupDo
	Joins(fields ...field.RelationField) ISpecGroupDo
	Preload(fields ...field.RelationField) ISpecGroupDo
	FirstOrInit() (*model.SpecGroup, error)
	FirstOrCreate() (*model.SpecGroup, error)
	FindByPage(offset int, limit int) (result []*model.SpecGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpecGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s specGroupDo) Debug() ISpecGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s specGroupDo) WithContext(ctx context.Context) ISpecGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s specGroupDo) ReadDB() ISpecGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s specGroupDo) WriteDB() ISpecGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s specGroupDo) Session(config *gorm.Session) ISpecGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s specGroupDo) Clauses(conds ...clause.Expression) ISpecGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s specGroupDo) Returning(value interface{}, columns ...string) ISpecGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s specGroupDo) Not(conds ...gen.Condition) ISpecGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s specGroupDo) Or(conds ...gen.Condition) ISpecGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s specGroupDo) Select(conds ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s specGroupDo) Where(conds ...gen.Condition) ISpecGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s specGroupDo) Order(conds ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s specGroupDo) Distinct(cols ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s specGroupDo) Omit(cols ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s specGroupDo) Join(table schema.Tabler, on ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s specGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s specGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s specGroupDo) Group(cols ...field.Expr) ISpecGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s specGroupDo) Having(conds ...gen.Condition) ISpecGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s specGroupDo) Limit(limit int) ISpecGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s specGroupDo) Offset(offset int) ISpecGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s specGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpecGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s specGroupDo) Unscoped() ISpecGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s specGroupDo) Create(values ...*model.SpecGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s specGroupDo) CreateInBatches(values []*model.SpecGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s specGroupDo) Save(values ...*model.SpecGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s specGroupDo) First() (*model.SpecGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpecGroup), nil
	}
}

func (s specGroupDo) Take() (*model.SpecGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpecGroup), nil
	}
}

func (s specGroupDo) Last() (*model.SpecGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpecGroup), nil
	}
}

func (s specGroupDo) Find() ([]*model.SpecGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpecGroup), err
}

func (s specGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpecGroup, err error) {
	buf := make([]*model.SpecGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s specGroupDo) FindInBatches(result *[]*model.SpecGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s specGroupDo) Attrs(attrs ...field.AssignExpr) ISpecGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s specGroupDo) Assign(attrs ...field.AssignExpr) ISpecGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s specGroupDo) Joins(fields ...field.RelationField) ISpecGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s specGroupDo) Preload(fields ...field.RelationField) ISpecGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s specGroupDo) FirstOrInit() (*model.SpecGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpecGroup), nil
	}
}

func (s specGroupDo) FirstOrCreate() (*model.SpecGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpecGroup), nil
	}
}

func (s specGroupDo) FindByPage(offset int, limit int) (result []*model.SpecGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s specGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s specGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s specGroupDo) Delete(models ...*model.SpecGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *specGroupDo) withDO(do gen.Dao) *specGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
